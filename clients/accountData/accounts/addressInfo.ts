/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';

export const ADDRESS_INFO_DISCRIMINATOR = 0;

export function getAddressInfoDiscriminatorBytes() {
  return getU8Encoder().encode(ADDRESS_INFO_DISCRIMINATOR);
}

export type AddressInfo = {
  name: string;
  houseNumber: number;
  street: string;
  city: string;
};

export type AddressInfoArgs = AddressInfo;

export function getAddressInfoEncoder(): Encoder<AddressInfoArgs> {
  return getStructEncoder([
    ['name', fixEncoderSize(getUtf8Encoder(), 50)],
    ['houseNumber', getU8Encoder()],
    ['street', fixEncoderSize(getUtf8Encoder(), 50)],
    ['city', fixEncoderSize(getUtf8Encoder(), 50)],
  ]);
}

export function getAddressInfoDecoder(): Decoder<AddressInfo> {
  return getStructDecoder([
    ['name', fixDecoderSize(getUtf8Decoder(), 50)],
    ['houseNumber', getU8Decoder()],
    ['street', fixDecoderSize(getUtf8Decoder(), 50)],
    ['city', fixDecoderSize(getUtf8Decoder(), 50)],
  ]);
}

export function getAddressInfoCodec(): Codec<AddressInfoArgs, AddressInfo> {
  return combineCodec(getAddressInfoEncoder(), getAddressInfoDecoder());
}

export function decodeAddressInfo<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<AddressInfo, TAddress>;
export function decodeAddressInfo<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<AddressInfo, TAddress>;
export function decodeAddressInfo<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<AddressInfo, TAddress> | MaybeAccount<AddressInfo, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAddressInfoDecoder(),
  );
}

export async function fetchAddressInfo<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<AddressInfo, TAddress>> {
  const maybeAccount = await fetchMaybeAddressInfo(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAddressInfo<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<AddressInfo, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAddressInfo(maybeAccount);
}

export async function fetchAllAddressInfo(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<AddressInfo>[]> {
  const maybeAccounts = await fetchAllMaybeAddressInfo(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAddressInfo(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<AddressInfo>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAddressInfo(maybeAccount));
}
