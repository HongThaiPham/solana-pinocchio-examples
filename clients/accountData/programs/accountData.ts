/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { type ParsedCreateInstruction } from '../instructions';

export const ACCOUNT_DATA_PROGRAM_ADDRESS =
  'EAUvJAw61MTaJbyV4tqFB4dEZuYHdYrtpGQ35hDsQ6Dw' as Address<'EAUvJAw61MTaJbyV4tqFB4dEZuYHdYrtpGQ35hDsQ6Dw'>;

export enum AccountDataAccount {
  AddressInfo,
}

export function identifyAccountDataAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): AccountDataAccount {
  const data = 'data' in account ? account.data : account;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return AccountDataAccount.AddressInfo;
  }
  throw new Error(
    'The provided account could not be identified as a accountData account.',
  );
}

export enum AccountDataInstruction {
  Create,
}

export function identifyAccountDataInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): AccountDataInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return AccountDataInstruction.Create;
  }
  throw new Error(
    'The provided instruction could not be identified as a accountData instruction.',
  );
}

export type ParsedAccountDataInstruction<
  TProgram extends string = 'EAUvJAw61MTaJbyV4tqFB4dEZuYHdYrtpGQ35hDsQ6Dw',
> = {
  instructionType: AccountDataInstruction.Create;
} & ParsedCreateInstruction<TProgram>;
