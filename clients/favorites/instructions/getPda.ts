/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableSignerAccount,
} from '@solana/kit';
import { FAVORITES_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const GET_PDA_DISCRIMINATOR = 1;

export function getGetPdaDiscriminatorBytes() {
  return getU8Encoder().encode(GET_PDA_DISCRIMINATOR);
}

export type GetPdaInstruction<
  TProgram extends string = typeof FAVORITES_PROGRAM_ADDRESS,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountFavorites extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountFavorites extends string
        ? ReadonlyAccount<TAccountFavorites>
        : TAccountFavorites,
      ...TRemainingAccounts,
    ]
  >;

export type GetPdaInstructionData = { discriminator: number };

export type GetPdaInstructionDataArgs = {};

export function getGetPdaInstructionDataEncoder(): Encoder<GetPdaInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 1 }),
  );
}

export function getGetPdaInstructionDataDecoder(): Decoder<GetPdaInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getGetPdaInstructionDataCodec(): Codec<
  GetPdaInstructionDataArgs,
  GetPdaInstructionData
> {
  return combineCodec(
    getGetPdaInstructionDataEncoder(),
    getGetPdaInstructionDataDecoder(),
  );
}

export type GetPdaInput<
  TAccountUser extends string = string,
  TAccountFavorites extends string = string,
> = {
  /** The owner of the favorites account */
  user: TransactionSigner<TAccountUser>;
  /** The favorites account to create */
  favorites: Address<TAccountFavorites>;
};

export function getGetPdaInstruction<
  TAccountUser extends string,
  TAccountFavorites extends string,
  TProgramAddress extends Address = typeof FAVORITES_PROGRAM_ADDRESS,
>(
  input: GetPdaInput<TAccountUser, TAccountFavorites>,
  config?: { programAddress?: TProgramAddress },
): GetPdaInstruction<TProgramAddress, TAccountUser, TAccountFavorites> {
  // Program address.
  const programAddress = config?.programAddress ?? FAVORITES_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    favorites: { value: input.favorites ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.favorites),
    ],
    programAddress,
    data: getGetPdaInstructionDataEncoder().encode({}),
  } as GetPdaInstruction<TProgramAddress, TAccountUser, TAccountFavorites>;

  return instruction;
}

export type ParsedGetPdaInstruction<
  TProgram extends string = typeof FAVORITES_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The owner of the favorites account */
    user: TAccountMetas[0];
    /** The favorites account to create */
    favorites: TAccountMetas[1];
  };
  data: GetPdaInstructionData;
};

export function parseGetPdaInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedGetPdaInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      favorites: getNextAccount(),
    },
    data: getGetPdaInstructionDataDecoder().decode(instruction.data),
  };
}
