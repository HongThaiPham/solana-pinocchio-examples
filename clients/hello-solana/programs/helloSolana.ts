/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { type ParsedHelloInstruction } from '../instructions';

export const HELLO_SOLANA_PROGRAM_ADDRESS =
  'FpFC3vEsjXKTrLweeD9PaG4HpTqMNJNoMvSVcZVJ8JCT' as Address<'FpFC3vEsjXKTrLweeD9PaG4HpTqMNJNoMvSVcZVJ8JCT'>;

export enum HelloSolanaInstruction {
  Hello,
}

export function identifyHelloSolanaInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): HelloSolanaInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return HelloSolanaInstruction.Hello;
  }
  throw new Error(
    'The provided instruction could not be identified as a helloSolana instruction.',
  );
}

export type ParsedHelloSolanaInstruction<
  TProgram extends string = 'FpFC3vEsjXKTrLweeD9PaG4HpTqMNJNoMvSVcZVJ8JCT',
> = {
  instructionType: HelloSolanaInstruction.Hello;
} & ParsedHelloInstruction<TProgram>;
