/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  getU8Encoder,
  type Address,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
} from '@solana/kit';
import { HELLO_SOLANA_PROGRAM_ADDRESS } from '../programs';

export const HELLO_DISCRIMINATOR = 0;

export function getHelloDiscriminatorBytes() {
  return getU8Encoder().encode(HELLO_DISCRIMINATOR);
}

export type HelloInstruction<
  TProgram extends string = typeof HELLO_SOLANA_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> & IInstructionWithAccounts<TRemainingAccounts>;

export type HelloInput = {};

export function getHelloInstruction<
  TProgramAddress extends Address = typeof HELLO_SOLANA_PROGRAM_ADDRESS,
>(config?: {
  programAddress?: TProgramAddress;
}): HelloInstruction<TProgramAddress> {
  // Program address.
  const programAddress = config?.programAddress ?? HELLO_SOLANA_PROGRAM_ADDRESS;

  const instruction = { programAddress } as HelloInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedHelloInstruction<
  TProgram extends string = typeof HELLO_SOLANA_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
};

export function parseHelloInstruction<TProgram extends string>(
  instruction: IInstruction<TProgram>,
): ParsedHelloInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
  };
}
