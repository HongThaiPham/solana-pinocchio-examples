/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedTransferSolWithCpiInstruction,
  type ParsedTransferSolWithProgramInstruction,
} from '../instructions';

export const TRANSFER_SOL_PROGRAM_ADDRESS =
  'QBDA4wAjJpX1rmpW7g6eSdize5Dq4mHbnRxkfNQCWya' as Address<'QBDA4wAjJpX1rmpW7g6eSdize5Dq4mHbnRxkfNQCWya'>;

export enum TransferSolInstruction {
  TransferSolWithProgram,
  TransferSolWithCpi,
}

export function identifyTransferSolInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): TransferSolInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return TransferSolInstruction.TransferSolWithProgram;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return TransferSolInstruction.TransferSolWithCpi;
  }
  throw new Error(
    'The provided instruction could not be identified as a transferSol instruction.',
  );
}

export type ParsedTransferSolInstruction<
  TProgram extends string = 'QBDA4wAjJpX1rmpW7g6eSdize5Dq4mHbnRxkfNQCWya',
> =
  | ({
      instructionType: TransferSolInstruction.TransferSolWithProgram;
    } & ParsedTransferSolWithProgramInstruction<TProgram>)
  | ({
      instructionType: TransferSolInstruction.TransferSolWithCpi;
    } & ParsedTransferSolWithCpiInstruction<TProgram>);
