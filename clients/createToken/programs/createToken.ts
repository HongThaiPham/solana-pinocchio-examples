/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { type ParsedCreateTokenInstruction } from '../instructions';

export const CREATE_TOKEN_PROGRAM_ADDRESS =
  '7QP9vxNo7EEwTjrskup6n3F1dcwgUsVKgMFnJsXoyBde' as Address<'7QP9vxNo7EEwTjrskup6n3F1dcwgUsVKgMFnJsXoyBde'>;

export enum CreateTokenInstruction {
  CreateToken,
}

export function identifyCreateTokenInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): CreateTokenInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return CreateTokenInstruction.CreateToken;
  }
  throw new Error(
    'The provided instruction could not be identified as a createToken instruction.',
  );
}

export type ParsedCreateTokenInstruction<
  TProgram extends string = '7QP9vxNo7EEwTjrskup6n3F1dcwgUsVKgMFnJsXoyBde',
> = {
  instructionType: CreateTokenInstruction.CreateToken;
} & ParsedCreateTokenInstruction<TProgram>;
