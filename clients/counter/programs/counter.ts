/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateInstruction,
  type ParsedDecreaseInstruction,
  type ParsedIncreaseInstruction,
} from '../instructions';

export const COUNTER_PROGRAM_ADDRESS =
  'Ag8tR8rXHLwUGPCfgGUJYjcYnFnqFdJ8XfjGP5LeRpg6' as Address<'Ag8tR8rXHLwUGPCfgGUJYjcYnFnqFdJ8XfjGP5LeRpg6'>;

export enum CounterAccount {
  Counter,
}

export function identifyCounterAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): CounterAccount {
  const data = 'data' in account ? account.data : account;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return CounterAccount.Counter;
  }
  throw new Error(
    'The provided account could not be identified as a counter account.',
  );
}

export enum CounterInstruction {
  Create,
  Increase,
  Decrease,
}

export function identifyCounterInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): CounterInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return CounterInstruction.Create;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return CounterInstruction.Increase;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return CounterInstruction.Decrease;
  }
  throw new Error(
    'The provided instruction could not be identified as a counter instruction.',
  );
}

export type ParsedCounterInstruction<
  TProgram extends string = 'Ag8tR8rXHLwUGPCfgGUJYjcYnFnqFdJ8XfjGP5LeRpg6',
> =
  | ({
      instructionType: CounterInstruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({
      instructionType: CounterInstruction.Increase;
    } & ParsedIncreaseInstruction<TProgram>)
  | ({
      instructionType: CounterInstruction.Decrease;
    } & ParsedDecreaseInstruction<TProgram>);
