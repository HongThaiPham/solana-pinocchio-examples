/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CROSS_PROGRAM_INVOCATION_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INCREASE_DISCRIMINATOR = 1;

export function getIncreaseDiscriminatorBytes() {
  return getU8Encoder().encode(INCREASE_DISCRIMINATOR);
}

export type IncreaseInstruction<
  TProgram extends string = typeof CROSS_PROGRAM_INVOCATION_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountCounter extends string | IAccountMeta<string> = string,
  TAccountCounterProgram extends
    | string
    | IAccountMeta<string> = 'Ag8tR8rXHLwUGPCfgGUJYjcYnFnqFdJ8XfjGP5LeRpg6',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountCounter extends string
        ? WritableAccount<TAccountCounter>
        : TAccountCounter,
      TAccountCounterProgram extends string
        ? ReadonlyAccount<TAccountCounterProgram>
        : TAccountCounterProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type IncreaseInstructionData = { discriminator: number };

export type IncreaseInstructionDataArgs = {};

export function getIncreaseInstructionDataEncoder(): Encoder<IncreaseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 1 }),
  );
}

export function getIncreaseInstructionDataDecoder(): Decoder<IncreaseInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getIncreaseInstructionDataCodec(): Codec<
  IncreaseInstructionDataArgs,
  IncreaseInstructionData
> {
  return combineCodec(
    getIncreaseInstructionDataEncoder(),
    getIncreaseInstructionDataDecoder(),
  );
}

export type IncreaseInput<
  TAccountOwner extends string = string,
  TAccountCounter extends string = string,
  TAccountCounterProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The owner of the counter account. */
  owner: TransactionSigner<TAccountOwner>;
  /** The counter account to be created. */
  counter: Address<TAccountCounter>;
  /** The counter account to be created. */
  counterProgram?: Address<TAccountCounterProgram>;
  /** System Program used to open our new class account */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getIncreaseInstruction<
  TAccountOwner extends string,
  TAccountCounter extends string,
  TAccountCounterProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof CROSS_PROGRAM_INVOCATION_PROGRAM_ADDRESS,
>(
  input: IncreaseInput<
    TAccountOwner,
    TAccountCounter,
    TAccountCounterProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): IncreaseInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountCounter,
  TAccountCounterProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CROSS_PROGRAM_INVOCATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    counter: { value: input.counter ?? null, isWritable: true },
    counterProgram: { value: input.counterProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.counterProgram.value) {
    accounts.counterProgram.value =
      'Ag8tR8rXHLwUGPCfgGUJYjcYnFnqFdJ8XfjGP5LeRpg6' as Address<'Ag8tR8rXHLwUGPCfgGUJYjcYnFnqFdJ8XfjGP5LeRpg6'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.counter),
      getAccountMeta(accounts.counterProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getIncreaseInstructionDataEncoder().encode({}),
  } as IncreaseInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountCounter,
    TAccountCounterProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedIncreaseInstruction<
  TProgram extends string = typeof CROSS_PROGRAM_INVOCATION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The owner of the counter account. */
    owner: TAccountMetas[0];
    /** The counter account to be created. */
    counter: TAccountMetas[1];
    /** The counter account to be created. */
    counterProgram: TAccountMetas[2];
    /** System Program used to open our new class account */
    systemProgram: TAccountMetas[3];
  };
  data: IncreaseInstructionData;
};

export function parseIncreaseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedIncreaseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      counter: getNextAccount(),
      counterProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getIncreaseInstructionDataDecoder().decode(instruction.data),
  };
}
