/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SPL_TOKEN_MINTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MINT_TOKEN_DISCRIMINATOR = 1;

export function getMintTokenDiscriminatorBytes() {
  return getU8Encoder().encode(MINT_TOKEN_DISCRIMINATOR);
}

export type MintTokenInstruction<
  TProgram extends string = typeof SPL_TOKEN_MINTER_PROGRAM_ADDRESS,
  TAccountMintAuthority extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTo extends string | IAccountMeta<string> = string,
  TAccountTokenAccount extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMintAuthority extends string
        ? WritableSignerAccount<TAccountMintAuthority> &
            IAccountSignerMeta<TAccountMintAuthority>
        : TAccountMintAuthority,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountTo extends string ? ReadonlyAccount<TAccountTo> : TAccountTo,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintTokenInstructionData = {
  discriminator: number;
  /** The amount of tokens to mint. */
  amount: bigint;
};

export type MintTokenInstructionDataArgs = {
  /** The amount of tokens to mint. */
  amount: number | bigint;
};

export function getMintTokenInstructionDataEncoder(): Encoder<MintTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 1 }),
  );
}

export function getMintTokenInstructionDataDecoder(): Decoder<MintTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getMintTokenInstructionDataCodec(): Codec<
  MintTokenInstructionDataArgs,
  MintTokenInstructionData
> {
  return combineCodec(
    getMintTokenInstructionDataEncoder(),
    getMintTokenInstructionDataDecoder(),
  );
}

export type MintTokenInput<
  TAccountMintAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountTo extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The authority that can mint new tokens. */
  mintAuthority: TransactionSigner<TAccountMintAuthority>;
  /** The mint account to mint tokens to */
  mint: Address<TAccountMint>;
  /** The wallet to mint tokens to */
  to: Address<TAccountTo>;
  /** The token account to mint tokens to. If not provided, the associated token account will be used. */
  tokenAccount: Address<TAccountTokenAccount>;
  /** The associated token program that will handle the mint */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** The token program that will handle the mint */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** System Program used to open our new account */
  systemProgram?: Address<TAccountSystemProgram>;
  amount: MintTokenInstructionDataArgs['amount'];
};

export function getMintTokenInstruction<
  TAccountMintAuthority extends string,
  TAccountMint extends string,
  TAccountTo extends string,
  TAccountTokenAccount extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SPL_TOKEN_MINTER_PROGRAM_ADDRESS,
>(
  input: MintTokenInput<
    TAccountMintAuthority,
    TAccountMint,
    TAccountTo,
    TAccountTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): MintTokenInstruction<
  TProgramAddress,
  TAccountMintAuthority,
  TAccountMint,
  TAccountTo,
  TAccountTokenAccount,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SPL_TOKEN_MINTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    to: { value: input.to ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.to),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMintTokenInstructionDataEncoder().encode(
      args as MintTokenInstructionDataArgs,
    ),
  } as MintTokenInstruction<
    TProgramAddress,
    TAccountMintAuthority,
    TAccountMint,
    TAccountTo,
    TAccountTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedMintTokenInstruction<
  TProgram extends string = typeof SPL_TOKEN_MINTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The authority that can mint new tokens. */
    mintAuthority: TAccountMetas[0];
    /** The mint account to mint tokens to */
    mint: TAccountMetas[1];
    /** The wallet to mint tokens to */
    to: TAccountMetas[2];
    /** The token account to mint tokens to. If not provided, the associated token account will be used. */
    tokenAccount: TAccountMetas[3];
    /** The associated token program that will handle the mint */
    associatedTokenProgram: TAccountMetas[4];
    /** The token program that will handle the mint */
    tokenProgram: TAccountMetas[5];
    /** System Program used to open our new account */
    systemProgram: TAccountMetas[6];
  };
  data: MintTokenInstructionData;
};

export function parseMintTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedMintTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mintAuthority: getNextAccount(),
      mint: getNextAccount(),
      to: getNextAccount(),
      tokenAccount: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMintTokenInstructionDataDecoder().decode(instruction.data),
  };
}
