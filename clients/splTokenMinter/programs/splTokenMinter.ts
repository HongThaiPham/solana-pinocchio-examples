/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateTokenInstruction,
  type ParsedMintTokenInstruction,
} from '../instructions';

export const SPL_TOKEN_MINTER_PROGRAM_ADDRESS =
  '4HhKzZwZVL3hjSWYaqPGHXFDkgzSwcJeH2z6aaqYtWiv' as Address<'4HhKzZwZVL3hjSWYaqPGHXFDkgzSwcJeH2z6aaqYtWiv'>;

export enum SplTokenMinterInstruction {
  CreateToken,
  MintToken,
}

export function identifySplTokenMinterInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): SplTokenMinterInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return SplTokenMinterInstruction.CreateToken;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return SplTokenMinterInstruction.MintToken;
  }
  throw new Error(
    'The provided instruction could not be identified as a splTokenMinter instruction.',
  );
}

export type ParsedSplTokenMinterInstruction<
  TProgram extends string = '4HhKzZwZVL3hjSWYaqPGHXFDkgzSwcJeH2z6aaqYtWiv',
> =
  | ({
      instructionType: SplTokenMinterInstruction.CreateToken;
    } & ParsedCreateTokenInstruction<TProgram>)
  | ({
      instructionType: SplTokenMinterInstruction.MintToken;
    } & ParsedMintTokenInstruction<TProgram>);
