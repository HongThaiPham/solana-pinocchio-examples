/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateTokenInstruction,
  type ParsedMintTokenInstruction,
  type ParsedTransferInstruction,
} from '../instructions';

export const TOKEN2022_BASIC_PROGRAM_ADDRESS =
  'DfKryFwKhmTHR7qjaUxKDsQR8BT5jdRJJ6tf4CP82eaC' as Address<'DfKryFwKhmTHR7qjaUxKDsQR8BT5jdRJJ6tf4CP82eaC'>;

export enum Token2022BasicInstruction {
  CreateToken,
  MintToken,
  Transfer,
}

export function identifyToken2022BasicInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): Token2022BasicInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return Token2022BasicInstruction.CreateToken;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return Token2022BasicInstruction.MintToken;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return Token2022BasicInstruction.Transfer;
  }
  throw new Error(
    'The provided instruction could not be identified as a token2022Basic instruction.',
  );
}

export type ParsedToken2022BasicInstruction<
  TProgram extends string = 'DfKryFwKhmTHR7qjaUxKDsQR8BT5jdRJJ6tf4CP82eaC',
> =
  | ({
      instructionType: Token2022BasicInstruction.CreateToken;
    } & ParsedCreateTokenInstruction<TProgram>)
  | ({
      instructionType: Token2022BasicInstruction.MintToken;
    } & ParsedMintTokenInstruction<TProgram>)
  | ({
      instructionType: Token2022BasicInstruction.Transfer;
    } & ParsedTransferInstruction<TProgram>);
