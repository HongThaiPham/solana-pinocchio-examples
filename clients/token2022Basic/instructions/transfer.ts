/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TOKEN2022_BASIC_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const TRANSFER_DISCRIMINATOR = 2;

export function getTransferDiscriminatorBytes() {
  return getU8Encoder().encode(TRANSFER_DISCRIMINATOR);
}

export type TransferInstruction<
  TProgram extends string = typeof TOKEN2022_BASIC_PROGRAM_ADDRESS,
  TAccountFrom extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTo extends string | IAccountMeta<string> = string,
  TAccountFromTokenAccount extends string | IAccountMeta<string> = string,
  TAccountToTokenAccount extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountFrom extends string
        ? WritableSignerAccount<TAccountFrom> & IAccountSignerMeta<TAccountFrom>
        : TAccountFrom,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountTo extends string ? ReadonlyAccount<TAccountTo> : TAccountTo,
      TAccountFromTokenAccount extends string
        ? WritableAccount<TAccountFromTokenAccount>
        : TAccountFromTokenAccount,
      TAccountToTokenAccount extends string
        ? WritableAccount<TAccountToTokenAccount>
        : TAccountToTokenAccount,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type TransferInstructionData = {
  discriminator: number;
  /** The amount of tokens to transfer. */
  amount: bigint;
};

export type TransferInstructionDataArgs = {
  /** The amount of tokens to transfer. */
  amount: number | bigint;
};

export function getTransferInstructionDataEncoder(): Encoder<TransferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 2 }),
  );
}

export function getTransferInstructionDataDecoder(): Decoder<TransferInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getTransferInstructionDataCodec(): Codec<
  TransferInstructionDataArgs,
  TransferInstructionData
> {
  return combineCodec(
    getTransferInstructionDataEncoder(),
    getTransferInstructionDataDecoder(),
  );
}

export type TransferInput<
  TAccountFrom extends string = string,
  TAccountMint extends string = string,
  TAccountTo extends string = string,
  TAccountFromTokenAccount extends string = string,
  TAccountToTokenAccount extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The wallet to transfer tokens from */
  from: TransactionSigner<TAccountFrom>;
  /** The mint account to mint tokens to */
  mint: Address<TAccountMint>;
  /** The wallet to mint tokens to */
  to: Address<TAccountTo>;
  /** The token account to transfer tokens from. If not provided, the associated token account will be used. */
  fromTokenAccount: Address<TAccountFromTokenAccount>;
  /** The token account to transfer tokens to. If not provided, the associated token account will be used. */
  toTokenAccount: Address<TAccountToTokenAccount>;
  /** The associated token program that will handle the mint */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** The token program that will handle the mint */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** System Program used to open our new account */
  systemProgram?: Address<TAccountSystemProgram>;
  amount: TransferInstructionDataArgs['amount'];
};

export function getTransferInstruction<
  TAccountFrom extends string,
  TAccountMint extends string,
  TAccountTo extends string,
  TAccountFromTokenAccount extends string,
  TAccountToTokenAccount extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TOKEN2022_BASIC_PROGRAM_ADDRESS,
>(
  input: TransferInput<
    TAccountFrom,
    TAccountMint,
    TAccountTo,
    TAccountFromTokenAccount,
    TAccountToTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): TransferInstruction<
  TProgramAddress,
  TAccountFrom,
  TAccountMint,
  TAccountTo,
  TAccountFromTokenAccount,
  TAccountToTokenAccount,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN2022_BASIC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    from: { value: input.from ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    to: { value: input.to ?? null, isWritable: false },
    fromTokenAccount: {
      value: input.fromTokenAccount ?? null,
      isWritable: true,
    },
    toTokenAccount: { value: input.toTokenAccount ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.from),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.to),
      getAccountMeta(accounts.fromTokenAccount),
      getAccountMeta(accounts.toTokenAccount),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getTransferInstructionDataEncoder().encode(
      args as TransferInstructionDataArgs,
    ),
  } as TransferInstruction<
    TProgramAddress,
    TAccountFrom,
    TAccountMint,
    TAccountTo,
    TAccountFromTokenAccount,
    TAccountToTokenAccount,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedTransferInstruction<
  TProgram extends string = typeof TOKEN2022_BASIC_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The wallet to transfer tokens from */
    from: TAccountMetas[0];
    /** The mint account to mint tokens to */
    mint: TAccountMetas[1];
    /** The wallet to mint tokens to */
    to: TAccountMetas[2];
    /** The token account to transfer tokens from. If not provided, the associated token account will be used. */
    fromTokenAccount: TAccountMetas[3];
    /** The token account to transfer tokens to. If not provided, the associated token account will be used. */
    toTokenAccount: TAccountMetas[4];
    /** The associated token program that will handle the mint */
    associatedTokenProgram: TAccountMetas[5];
    /** The token program that will handle the mint */
    tokenProgram: TAccountMetas[6];
    /** System Program used to open our new account */
    systemProgram: TAccountMetas[7];
  };
  data: TransferInstructionData;
};

export function parseTransferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedTransferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      from: getNextAccount(),
      mint: getNextAccount(),
      to: getNextAccount(),
      fromTokenAccount: getNextAccount(),
      toTokenAccount: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getTransferInstructionDataDecoder().decode(instruction.data),
  };
}
